{"version":3,"file":"dashboard.chart.element-FxHDcKCS.js","sources":["../../warren.github.template.v03.client/src/Dashboards/function-show-alert.ts","../../warren.github.template.v03.client/src/Dashboards/dashboard.chart.element.ts"],"sourcesContent":["// function-show-alert.ts\r\nexport function showAlert() {\r\n    alert('Hello Dean!');\r\n}\r\n","import { LitElement, css, html, customElement, render} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport \"@umbraco-cms/backoffice/log-viewer\";\r\n// impoert function for the test button from the function-show-alert.ts\r\n import { showAlert } from \"./function-show-alert\";\r\n\r\n@customElement('dashboard-chart')\r\nexport class DashboardChartElement extends UmbElementMixin(LitElement) {\r\n\r\n    // Example method that uses the showAlert function\r\n    callAlert() {\r\n        showAlert(); // This will show the alert with the message \"Hello Dean!\"\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <uui-box headline=\"Hello World\" style=\"margin:20px;\">\r\n                <p>A UUI Box with an HTML paragraph</p>                \r\n            </uui-box>\r\n            <!-- This is the markup for the test button -->\r\n            <uui-box headline=\"Test Button\" style=\"margin:20px;\">\r\n            <uui-form>\r\n            <uui-button label=\"xxxx\" @click=\"${this.callAlert}\">Click me!</uui-button>\r\n            </uui-form>            \r\n            </uui-box>\r\n            <uui-box headline=\"Divinator\" style=\"margin:20px;\">\r\n        <measure-bar></measure-bar>             \r\n            </uui-box>\r\n        `;\r\n    }\r\n    // This is the function for the test button\r\n    // showAlert() {\r\n    //     alert('Hello Dean!');\r\n    // }\r\n}\r\n\r\ncustomElements.define(\r\n    \"measure-bar\",\r\n    class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n  \r\n        // Initialize the shadow DOM\r\n        const shadow = this.attachShadow({ mode: \"open\" });\r\n  \r\n        // Create the number-box div and number span\r\n        const numberBox = document.createElement(\"div\");\r\n        numberBox.className = \"number-box\";\r\n        numberBox.setAttribute(\"part\", \"number-box\"); // Expose this part for styling\r\n        const numberSpan = document.createElement(\"span\");\r\n        numberSpan.className = \"number\";\r\n        numberBox.appendChild(numberSpan);\r\n        shadow.appendChild(numberBox);\r\n  \r\n        // Set up the ResizeObserver\r\n        const myObserver = new ResizeObserver((entries) => {\r\n          entries.forEach((entry) => {\r\n            // Update the content of the number span with the new width\r\n            numberSpan.textContent = entry.contentRect.width + \"px\";\r\n          });\r\n        });\r\n  \r\n        // Observe the host element for resize events\r\n        myObserver.observe(this);\r\n  \r\n        // Include the CSS by creating a <style> element\r\n        const style = document.createElement(\"style\");\r\n        style.textContent = `\r\n        :host {\r\n        //outline: #000 dashed 1px;\r\n        font-family: \"source-code-pro\", monospace;\r\n        box-sizing: border-box;\r\n        display: grid;\r\n        place-items: center;\r\n        height: 21px;\r\n        background-image: linear-gradient(\r\n        to right,\r\n        red 1px,\r\n        transparent 1px,\r\n        transparent calc(100% - 1px),\r\n        red calc(100% - 1px)\r\n      ),\r\n      linear-gradient(white 50%, red 10px 11px, white 50%);\r\n  }\r\n  \r\n          .number-box {\r\n            background-color: #fff;\r\n            color: #000;\r\n            padding: 0 0.5rem;\r\n            font-weight: 700;\r\n            font-size: 1rem;\r\n            font-style: normal;\r\n            text-align: center;\r\n          }\r\n          .number {\r\n            /* Your CSS for number */\r\n          }\r\n          /* Add other component-specific styles here */\r\n        `;\r\n        shadow.appendChild(style);\r\n      }\r\n    }\r\n  );\r\n  \r\nexport default DashboardChartElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'dashboard-chart': DashboardChartElement;\r\n  }\r\n}"],"names":["showAlert","DashboardChartElement","UmbElementMixin","LitElement","html","__decorateClass","customElement","shadow","numberBox","numberSpan","entries","entry","style","DashboardChartElement$1"],"mappings":";;;AACO,SAASA,IAAY;AACxB,QAAM,aAAa;AACvB;;;;;;ACIO,IAAMC,IAAN,cAAoCC,EAAgBC,CAAU,EAAE;AAAA;AAAA,EAGnE,YAAY;AACE,IAAAH;EACd;AAAA,EAEA,SAAS;AACE,WAAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAOgC,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzD;AAAA;AAAA;AAAA;AAAA;AAKJ;AA3BaH,IAANI,EAAA;AAAA,EADNC,EAAc,iBAAiB;AAAA,GACnBL,CAAA;AA6Bb,eAAe;AAAA,EACX;AAAA,EACA,cAAc,YAAY;AAAA,IACxB,cAAc;AACN;AAGN,YAAMM,IAAS,KAAK,aAAa,EAAE,MAAM,QAAQ,GAG3CC,IAAY,SAAS,cAAc,KAAK;AAC9C,MAAAA,EAAU,YAAY,cACZA,EAAA,aAAa,QAAQ,YAAY;AACrC,YAAAC,IAAa,SAAS,cAAc,MAAM;AAChD,MAAAA,EAAW,YAAY,UACvBD,EAAU,YAAYC,CAAU,GAChCF,EAAO,YAAYC,CAAS,GAGT,IAAI,eAAe,CAACE,MAAY;AACzC,QAAAA,EAAA,QAAQ,CAACC,MAAU;AAEd,UAAAF,EAAA,cAAcE,EAAM,YAAY,QAAQ;AAAA,QAAA,CACpD;AAAA,MAAA,CACF,EAGU,QAAQ,IAAI;AAGjB,YAAAC,IAAQ,SAAS,cAAc,OAAO;AAC5C,MAAAA,EAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAgCpBL,EAAO,YAAYK,CAAK;AAAA,IAC1B;AAAA,EACF;AACF;AAEF,MAAAC,IAAeZ;"}